{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/tooltip.jsx",
      "content": "\"use client\";\nimport React, { createContext, useContext, useState, useRef, useEffect, forwardRef, } from \"react\";\nimport { cn } from \"@/lib/utils\";\nconst TooltipContext = createContext(null);\nfunction TooltipProvider({ delayDuration = 0, children, }) {\n    const [show, setShow] = useState(true);\n    const triggerRef = useRef(null);\n    const context = {\n        show,\n        delayDuration,\n        sideOffset: 0,\n        setShow,\n        triggerRef,\n    };\n    return (React.createElement(TooltipContext.Provider, { value: context }, children));\n}\nfunction Tooltip({ children }) {\n    return React.createElement(TooltipProvider, null, children);\n}\nconst TooltipTrigger = forwardRef(({ children, ...props }, _ref) => {\n    const context = useContext(TooltipContext);\n    if (!context)\n        throw new Error(\"TooltipTrigger must be inside TooltipProvider\");\n    const { setShow, delayDuration, triggerRef } = context;\n    const hoverTimeout = useRef(null);\n    const touchTimeout = useRef(null);\n    const showTooltip = () => {\n        if (hoverTimeout.current)\n            clearTimeout(hoverTimeout.current);\n        hoverTimeout.current = setTimeout(() => setShow(true), delayDuration);\n    };\n    const hideTooltip = () => {\n        if (hoverTimeout.current)\n            clearTimeout(hoverTimeout.current);\n        if (touchTimeout.current)\n            clearTimeout(touchTimeout.current);\n        setShow(false);\n    };\n    const handleTouchStart = () => {\n        if (touchTimeout.current)\n            clearTimeout(touchTimeout.current);\n        touchTimeout.current = setTimeout(() => setShow(true), 100);\n    };\n    const handleTouchEnd = () => {\n        touchTimeout.current = setTimeout(() => setShow(false), 3000);\n    };\n    useEffect(() => {\n        const handleOutsideTouch = (e) => {\n            if (triggerRef.current &&\n                !triggerRef.current.contains(e.target)) {\n                hideTooltip();\n            }\n        };\n        document.addEventListener(\"touchstart\", handleOutsideTouch);\n        return () => {\n            document.removeEventListener(\"touchstart\", handleOutsideTouch);\n        };\n    }, [triggerRef]);\n    return (React.createElement(\"span\", { ...props, ref: (node) => {\n            triggerRef.current = node;\n            if (typeof _ref === \"function\")\n                _ref(node);\n            else if (_ref)\n                _ref.current =\n                    node;\n        }, \"data-slot\": \"tooltip-trigger\", onMouseEnter: showTooltip, onMouseLeave: hideTooltip, onFocus: showTooltip, onBlur: hideTooltip, onTouchStart: handleTouchStart, onTouchEnd: handleTouchEnd }, children));\n});\nTooltipTrigger.displayName = \"TooltipTrigger\";\nfunction TooltipContent({ className, children, sideOffset = 0, topOffset = 15, ...props }) {\n    const context = useContext(TooltipContext);\n    const [position, setPosition] = useState({ top: 0, left: 0 });\n    const contentRef = useRef(null);\n    if (!context)\n        throw new Error(\"TooltipContent must be inside TooltipProvider\");\n    const { show, triggerRef } = context;\n    useEffect(() => {\n        if (show && triggerRef.current && contentRef.current) {\n            const triggerRect = triggerRef.current.getBoundingClientRect();\n            const contentRect = contentRef.current.getBoundingClientRect();\n            const top = triggerRect.top - contentRect.height - topOffset - 2;\n            const left = triggerRect.left + (triggerRect.width - contentRect.width) / 2 - 5.5;\n            setPosition({ top, left });\n        }\n    }, [show, sideOffset, topOffset, triggerRef]);\n    if (!show)\n        return null;\n    return (React.createElement(\"div\", { ref: contentRef, \"data-slot\": \"tooltip-content\", role: \"tooltip\", className: cn(\"bg-white z-50 w-max max-w-[180px] rounded-[var(--radius)] p-[8px] text-sm border border-gray-200\", \"absolute animate-in fade-in-0 zoom-in-95\", className), style: {\n            top: position.top,\n            left: position.left,\n            position: \"fixed\",\n        }, ...props },\n        children,\n        React.createElement(\"div\", { className: \"absolute bg-white border-b-[1px] border-r-[1px] border-gray-200 z-49 w-[10px] h-[10px] rotate-45\", style: {\n                left: \"50%\",\n                bottom: \"-9.5px\",\n                transform: \"translateX(-50%)\",\n            } })));\n}\n/* -------------------- Exports -------------------- */\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}