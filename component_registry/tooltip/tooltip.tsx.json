{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/tooltip.tsx",
      "content": "\"use client\";\n\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useRef,\n  useEffect,\n  ReactNode,\n  HTMLAttributes,\n} from \"react\";\nimport { cn } from \"@/lib/utils\";\n\n// --- Context Setup ---\ntype TooltipContextType = {\n  show: boolean;\n  delayDuration: number;\n  sideOffset: number;\n  setShow: (val: boolean) => void;\n  triggerRef: React.RefObject<HTMLElement>;\n};\n\nconst TooltipContext = createContext<TooltipContextType | null>(null);\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  children,\n}: {\n  delayDuration?: number;\n  children: React.ReactNode;\n}) {\n  const [show, setShow] = useState(true);\n  const triggerRef = useRef<HTMLElement>(null);\n  const context: TooltipContextType = {\n    show,\n    delayDuration,\n    sideOffset: 0,\n    setShow,\n    triggerRef,\n  };\n\n  return (\n    <TooltipContext.Provider value={context}>\n      {children}\n    </TooltipContext.Provider>\n  );\n}\n\nfunction Tooltip({ children }: { children: ReactNode }) {\n  return <TooltipProvider>{children}</TooltipProvider>;\n}\n\nfunction TooltipTrigger({\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLElement>) {\n  const context = useContext(TooltipContext);\n  if (!context)\n    throw new Error(\"TooltipTrigger must be inside TooltipProvider\");\n\n  const { setShow, delayDuration, triggerRef } = context;\n  const hoverTimeout = useRef<NodeJS.Timeout | null>(null);\n  const touchTimeout = useRef<NodeJS.Timeout | null>(null);\n\n  const showTooltip = () => {\n    if (hoverTimeout.current) clearTimeout(hoverTimeout.current);\n    hoverTimeout.current = setTimeout(() => setShow(true), delayDuration);\n  };\n\n  const hideTooltip = () => {\n    if (hoverTimeout.current) clearTimeout(hoverTimeout.current);\n    if (touchTimeout.current) clearTimeout(touchTimeout.current);\n    setShow(false);\n  };\n\n  const handleTouchStart = () => {\n    if (touchTimeout.current) clearTimeout(touchTimeout.current);\n    touchTimeout.current = setTimeout(() => setShow(true), 100); // tap-to-show after 100ms\n  };\n\n  const handleTouchEnd = () => {\n    // Auto-hide after a few seconds on mobile (optional)\n    touchTimeout.current = setTimeout(() => setShow(false), 3000);\n  };\n\n  // Optional: tap outside to dismiss tooltip on mobile\n  useEffect(() => {\n    const handleOutsideTouch = (e: TouchEvent) => {\n      if (\n        triggerRef.current &&\n        !triggerRef.current.contains(e.target as Node)\n      ) {\n        hideTooltip();\n      }\n    };\n\n    document.addEventListener(\"touchstart\", handleOutsideTouch);\n    return () => {\n      document.removeEventListener(\"touchstart\", handleOutsideTouch);\n    };\n  }, [triggerRef]);\n\n  return (\n    <span\n      {...props}\n      ref={triggerRef as any}\n      data-slot=\"tooltip-trigger\"\n      onMouseEnter={showTooltip}\n      onMouseLeave={hideTooltip}\n      onFocus={showTooltip}\n      onBlur={hideTooltip}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n    >\n      {children}\n    </span>\n  );\n}\n\ntype TooltipContentProps = {\n  className?: string;\n  children: ReactNode;\n  sideOffset?: number;\n  topOffset?: number;\n} & HTMLAttributes<HTMLDivElement>;\n\nfunction TooltipContent({\n  className,\n  children,\n  sideOffset = 0,\n  topOffset = 15,\n  ...props\n}: TooltipContentProps) {\n  const context = useContext(TooltipContext);\n  const [position, setPosition] = useState({ top: 0, left: 0 });\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  if (!context)\n    throw new Error(\"TooltipContent must be inside TooltipProvider\");\n\n  const { show, triggerRef } = context;\n\n  useEffect(() => {\n    if (show && triggerRef.current && contentRef.current) {\n      const triggerRect = triggerRef.current.getBoundingClientRect();\n      const contentRect = contentRef.current.getBoundingClientRect();\n\n      const top = triggerRect.top - contentRect.height - topOffset - 2;\n      const left =\n        triggerRect.left + (triggerRect.width - contentRect.width) / 2 - 5.5;\n\n      setPosition({ top, left });\n    }\n  }, [show, sideOffset, topOffset, triggerRef]);\n\n  if (!show) return null;\n\n  return (\n    <div\n      ref={contentRef}\n      data-slot=\"tooltip-content\"\n      role=\"tooltip\"\n      className={cn(\n        \"bg-white z-50 w-max max-w-[180px] rounded-[var(--radius)] p-[8px] text-sm border border-gray-200\",\n        \"absolute animate-in fade-in-0 zoom-in-95\",\n        className\n      )}\n      style={{\n        top: position.top,\n        left: position.left,\n        position: \"fixed\",\n      }}\n      {...props}\n    >\n      {children}\n      {/* Arrow */}\n      <div\n        className=\"absolute bg-white border-b-[1px] border-r-[1px] border-gray-200 z-49 w-[10px] h-[10px] rotate-45\"\n        style={{\n          left: \"50%\",\n          bottom: \"-9.5px\",\n          transform: \"translateX(-50%)\",\n        }}\n      />\n    </div>\n  );\n}\n\n// --- Exports ---\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}