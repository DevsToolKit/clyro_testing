{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/accordion.tsx",
      "content": "\"use client\";\n\nimport React, {\n  useState,\n  useRef,\n  useLayoutEffect,\n  useContext,\n  createContext,\n  ReactNode,\n  cloneElement,\n  Children,\n} from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronRight } from \"lucide-react\";\n\n/* --------------------\n   Types\n-------------------- */\ntype AccordionProps = {\n  multiple?: boolean;\n  children: ReactNode;\n};\n\ntype AccordionItemProps = {\n  classname?: string;\n  value: string;\n  children: ReactNode;\n};\n\ntype AccordionTriggerProps = {\n  children: ReactNode;\n  isOpen: boolean;\n  value: string;\n};\n\ntype AccordionContentProps = {\n  children: ReactNode;\n  isOpen: boolean;\n};\n\n/* --------------------\n   Context\n-------------------- */\nconst AccordionContext = createContext<{\n  openItems: string[];\n  toggleItem: (value: string) => void;\n  multiple: boolean;\n} | null>(null);\n\n/* --------------------\n   Accordion Root\n   Wraps all items\n-------------------- */\nfunction Accordion({ multiple = false, children }: AccordionProps) {\n  const [openItems, setOpenItems] = useState<string[]>([]);\n\n  const toggleItem = (value: string) => {\n    setOpenItems((prev) => {\n      const isOpen = prev.includes(value);\n      if (isOpen) {\n        return prev.filter((v) => v !== value);\n      }\n      return multiple ? [...prev, value] : [value];\n    });\n  };\n\n  return (\n    <AccordionContext.Provider value={{ openItems, toggleItem, multiple }}>\n      <div className=\"w-full max-w-[600px] min-w-[300px] rounded-[var(--radius)] border border-[var(--border)]\">\n        {children}\n      </div>\n    </AccordionContext.Provider>\n  );\n}\n\n/* --------------------\n   Accordion Item\n   Holds trigger + content\n-------------------- */\nfunction AccordionItem({ classname, value, children }: AccordionItemProps) {\n  const context = useContext(AccordionContext);\n  if (!context) throw new Error(\"AccordionItem must be used within Accordion\");\n\n  const isOpen = context.openItems.includes(value);\n\n  return (\n    <div\n      className={cn(\n        \"border-b border-[var(--border)] last:border-b-0 py-[13px] px-[16px]\",\n        classname\n      )}\n      data-state={isOpen ? \"open\" : \"closed\"}\n    >\n      {Children.map(children, (child) =>\n        cloneElement(child as React.ReactElement<AccordionTriggerProps>, {\n          isOpen,\n          value,\n        })\n      )}\n    </div>\n  );\n}\n\n/* --------------------\n   Accordion Trigger\n   Click to open/close\n-------------------- */\nfunction AccordionTrigger({ children, isOpen, value }: AccordionTriggerProps) {\n  const context = useContext(AccordionContext);\n  if (!context) return null;\n\n  return (\n    <div className={isOpen ? \"pb-[13px]\" : \"\"}>\n      <button\n        onClick={() => context.toggleItem(value)}\n        aria-expanded={isOpen}\n        className=\"flex items-center justify-between w-full gap-4 text-[var(--primary)]\"\n      >\n        <span className=\"text-[14px] leading-[22px]\">{children}</span>\n        <ChevronRight\n          className={cn(\n            \"w-5 h-5 transition-transform duration-200\",\n            isOpen && \"rotate-90\"\n          )}\n        />\n      </button>\n    </div>\n  );\n}\n\n/* --------------------\n   Accordion Content\n   Expands with height animation\n-------------------- */\nfunction AccordionContent({ children, isOpen }: AccordionContentProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [height, setHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    if (ref.current) {\n      setHeight(isOpen ? ref.current.scrollHeight : 0);\n    }\n  }, [isOpen, children]);\n\n  return (\n    <div\n      style={{ height: isOpen ? `${height}px` : \"0px\" }}\n      className=\"transition-all duration-300 ease-in-out overflow-hidden\"\n    >\n      <div\n        ref={ref}\n        className=\"text-[14px] leading-[18px] text-gray-600 text-wrap\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n\n/* --------------------\n   Export components\n-------------------- */\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}