{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/accordion.jsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ChevronRight } from \"lucide-react\";\nimport React, {\n  useState,\n  useRef,\n  useLayoutEffect,\n  useContext,\n  createContext,\n  cloneElement,\n  Children,\n} from \"react\";\n\n// Context\nconst AccordionContext = createContext(null);\n\n// Root\nfunction Accordion({ multiple = false, children }) {\n  const [openItems, setOpenItems] = useState([]);\n\n  const toggleItem = (value) => {\n    setOpenItems((prev) => {\n      const isOpen = prev.includes(value);\n      if (isOpen) {\n        return prev.filter((v) => v !== value);\n      } else {\n        return multiple ? [...prev, value] : [value];\n      }\n    });\n  };\n\n  return (\n    <AccordionContext.Provider value={{ openItems, toggleItem, multiple }}>\n      <div className=\"w-full max-w-[600px] min-w-[300px] rounded-[var(--radius)] border border-[var(--border)]\">\n        {children}\n      </div>\n    </AccordionContext.Provider>\n  );\n}\n\n// Item\nfunction AccordionItem({ classname, value, children }) {\n  const context = useContext(AccordionContext);\n  if (!context) throw new Error(\"AccordionItem must be used within Accordion\");\n\n  const isOpen = context.openItems.includes(value);\n\n  return (\n    <div\n      className={cn(\n        \"border-b border-[var(--border)] last:border-b-0 py-[13px] px-[16px]\",\n        classname\n      )}\n      data-state={isOpen ? \"open\" : \"closed\"}\n    >\n      {Children.map(children, (child) =>\n        cloneElement(child, {\n          isOpen,\n          value,\n        })\n      )}\n    </div>\n  );\n}\n\n// Trigger\nfunction AccordionTrigger({ children, isOpen, value }) {\n  const context = useContext(AccordionContext);\n  if (!context) return null;\n\n  return (\n    <div className={`${isOpen ? \"pb-[13px]\" : \"\"}`}>\n      <button\n        onClick={() => context.toggleItem(value)}\n        aria-expanded={isOpen}\n        className=\"flex items-center justify-between w-full gap-4 text-[var(--primary)]\"\n      >\n        <span className=\"text-[14px] leading-[22px]\">{children}</span>\n        <ChevronRight\n          className={cn(\n            \"w-5 h-5 transition-transform duration-200\",\n            isOpen && \"rotate-90\"\n          )}\n        />\n      </button>\n    </div>\n  );\n}\n\n// Content with dynamic height animation\nfunction AccordionContent({ children, isOpen }) {\n  const ref = useRef(null);\n  const [height, setHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    if (ref.current) {\n      if (isOpen) {\n        const fullHeight = ref.current.scrollHeight;\n        setHeight(fullHeight);\n      } else {\n        setHeight(0);\n      }\n    }\n  }, [isOpen, children]);\n\n  return (\n    <div\n      style={{\n        height: isOpen ? `${height}px` : \"0px\",\n      }}\n      className={cn(\"transition-all duration-300 ease-in-out overflow-hidden\")}\n    >\n      <div\n        ref={ref}\n        className=\"text-[14px] leading-[18px] text-gray-600 text-wrap\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n\n// Export components\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}