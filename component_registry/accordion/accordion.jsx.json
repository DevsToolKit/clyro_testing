{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/accordion.jsx",
      "content": "\"use client\";\nimport React, { useState, useRef, useLayoutEffect, useContext, createContext, cloneElement, Children, } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronRight } from \"lucide-react\";\n/* --------------------\n   Context\n-------------------- */\nconst AccordionContext = createContext(null);\n/* --------------------\n   Accordion Root\n   Wraps all items\n-------------------- */\nfunction Accordion({ multiple = false, children }) {\n    const [openItems, setOpenItems] = useState([]);\n    const toggleItem = (value) => {\n        setOpenItems((prev) => {\n            const isOpen = prev.includes(value);\n            if (isOpen) {\n                return prev.filter((v) => v !== value);\n            }\n            return multiple ? [...prev, value] : [value];\n        });\n    };\n    return (React.createElement(AccordionContext.Provider, { value: { openItems, toggleItem, multiple } },\n        React.createElement(\"div\", { className: \"w-full max-w-[600px] min-w-[300px] rounded-[var(--radius)] border border-[var(--border)]\" }, children)));\n}\n/* --------------------\n   Accordion Item\n   Holds trigger + content\n-------------------- */\nfunction AccordionItem({ classname, value, children }) {\n    const context = useContext(AccordionContext);\n    if (!context)\n        throw new Error(\"AccordionItem must be used within Accordion\");\n    const isOpen = context.openItems.includes(value);\n    return (React.createElement(\"div\", { className: cn(\"border-b border-[var(--border)] last:border-b-0 py-[13px] px-[16px]\", classname), \"data-state\": isOpen ? \"open\" : \"closed\" }, Children.map(children, (child) => cloneElement(child, {\n        isOpen,\n        value,\n    }))));\n}\n/* --------------------\n   Accordion Trigger\n   Click to open/close\n-------------------- */\nfunction AccordionTrigger({ children, isOpen, value }) {\n    const context = useContext(AccordionContext);\n    if (!context)\n        return null;\n    return (React.createElement(\"div\", { className: isOpen ? \"pb-[13px]\" : \"\" },\n        React.createElement(\"button\", { onClick: () => context.toggleItem(value), \"aria-expanded\": isOpen, className: \"flex items-center justify-between w-full gap-4 text-[var(--primary)]\" },\n            React.createElement(\"span\", { className: \"text-[14px] leading-[22px]\" }, children),\n            React.createElement(ChevronRight, { className: cn(\"w-5 h-5 transition-transform duration-200\", isOpen && \"rotate-90\") }))));\n}\n/* --------------------\n   Accordion Content\n   Expands with height animation\n-------------------- */\nfunction AccordionContent({ children, isOpen }) {\n    const ref = useRef(null);\n    const [height, setHeight] = useState(0);\n    useLayoutEffect(() => {\n        if (ref.current) {\n            setHeight(isOpen ? ref.current.scrollHeight : 0);\n        }\n    }, [isOpen, children]);\n    return (React.createElement(\"div\", { style: { height: isOpen ? `${height}px` : \"0px\" }, className: \"transition-all duration-300 ease-in-out overflow-hidden\" },\n        React.createElement(\"div\", { ref: ref, className: \"text-[14px] leading-[18px] text-gray-600 text-wrap\" }, children)));\n}\n/* --------------------\n   Export components\n-------------------- */\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}