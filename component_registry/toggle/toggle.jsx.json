{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "toggle",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/toggle.jsx",
      "content": "\"use client\";\n/* -------------------- Imports -------------------- */\nimport * as React from \"react\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n/* -------------------- Variants -------------------- */\n// Defines visual variants for the Toggle component\nconst toggleVariants = cva(\"inline-flex items-center justify-center gap-2 rounded-[var(--radius)] text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 aria-pressed:bg-accent aria-pressed:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\", {\n    variants: {\n        variant: {\n            default: \"bg-transparent\",\n            outline: \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        },\n        size: {\n            default: \"h-9 px-2 min-w-9\",\n            sm: \"h-8 px-1.5 min-w-8\",\n            lg: \"h-10 px-2.5 min-w-10\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n    },\n});\n/* -------------------- Toggle -------------------- */\n// A button-like component that toggles between pressed/unpressed states\nconst Toggle = React.forwardRef(({ className, variant, size, pressed, defaultPressed = false, onPressedChange, disabled, ...props }, ref) => {\n    const [isPressed, setIsPressed] = React.useState(defaultPressed);\n    const isControlled = pressed !== undefined;\n    const active = isControlled ? pressed : isPressed;\n    const handleClick = (e) => {\n        if (disabled)\n            return;\n        const newPressed = !active;\n        if (!isControlled)\n            setIsPressed(newPressed);\n        onPressedChange?.(newPressed);\n        props.onClick?.(e);\n    };\n    return (React.createElement(\"button\", { type: \"button\", ref: ref, className: cn(toggleVariants({ variant, size, className })), \"aria-pressed\": active, \"aria-disabled\": disabled, disabled: disabled, onClick: handleClick, ...props }));\n});\nToggle.displayName = \"Toggle\";\n/* -------------------- Exports -------------------- */\nexport { Toggle, toggleVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}