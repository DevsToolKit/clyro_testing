{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\n/* --------------------\n   Variants\n   Change button styles here\n-------------------- */\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-[var(--radius)] text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive disabled:cursor-not-allowed\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        info: \"bg-info text-white shadow-xs hover:bg-info/90\",\n        success: \"bg-success text-white shadow-xs hover:bg-success/80\",\n        destructive:\n          \"bg-destructive text-destructive-foreground text-white shadow-xs hover:bg-destructive/80\",\n        warning: \"bg-warning text-white shadow-xs hover:bg-warning/90\",\n        outline:\n          \"border border-input bg-transparent shadow-xs hover:bg-accent/50 hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\n/* --------------------\n   Props\n-------------------- */\n// Props for rendering as <button>\ntype ButtonAsButton = {\n  asChild?: false;\n} & React.ComponentPropsWithoutRef<\"button\"> &\n  VariantProps<typeof buttonVariants>;\n\n// Props for rendering as <div>\ntype ButtonAsDiv = {\n  asChild: true;\n} & React.ComponentPropsWithoutRef<\"div\"> &\n  VariantProps<typeof buttonVariants>;\n\ntype ButtonProps = ButtonAsButton | ButtonAsDiv;\n\n/* --------------------\n   Button Component\n-------------------- */\nconst Button = React.forwardRef<\n  HTMLButtonElement | HTMLDivElement,\n  ButtonProps\n>(\n  (\n    {\n      className,\n      variant = \"default\",\n      size = \"default\",\n      asChild = false,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    if (asChild) {\n      return (\n        <div\n          ref={ref as React.Ref<HTMLDivElement>}\n          className={cn(buttonVariants({ variant, size, className }))}\n          {...(props as React.ComponentPropsWithoutRef<\"div\">)}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    return (\n      <button\n        ref={ref as React.Ref<HTMLButtonElement>}\n        className={cn(buttonVariants({ variant, size, className }))}\n        {...(props as React.ComponentPropsWithoutRef<\"button\">)}\n      >\n        {children}\n      </button>\n    );\n  }\n);\n\nButton.displayName = \"Button\";\n\n/* --------------------\n   Export\n-------------------- */\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}