{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-otp",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/input-otp.jsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { MinusIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst InputOTPContext = React.createContext(null);\n\nfunction InputOTP({\n  length = 6,\n  onChange,\n  containerClassName,\n  className,\n  ...props\n}) {\n  const [value, setValue] = React.useState(Array(length).fill(\"\"));\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  React.useEffect(() => {\n    onChange?.(value.join(\"\"));\n  }, [value]);\n\n  const setValueAt = (index, char) => {\n    const next = [...value];\n    next[index] = char;\n    setValue(next);\n  };\n\n  return (\n    <InputOTPContext.Provider\n      value={{\n        value,\n        activeIndex,\n        setValueAt,\n        setValue,\n        setActiveIndex,\n        length,\n      }}\n    >\n      <div\n        data-slot=\"input-otp\"\n        className={cn(\n          \"flex items-center gap-2 has-disabled:opacity-50\",\n          containerClassName\n        )}\n        {...props}\n      />\n    </InputOTPContext.Provider>\n  );\n}\n\nfunction InputOTPGroup({ className, ...props }) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn(\"flex items-center\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction InputOTPSlot({ index, className, ...props }) {\n  const inputRef = React.useRef(null);\n  const context = React.useContext(InputOTPContext);\n\n  if (!context) throw new Error(\"InputOTPSlot must be inside InputOTP\");\n\n  const { value, setValue, activeIndex, setValueAt, setActiveIndex, length } =\n    context;\n  const char = value[index] ?? \"\";\n  const isActive = activeIndex === index;\n  const isCtrlA = React.useRef(false);\n\n  const handleKeyDown = (e) => {\n    if (e.ctrlKey && e.key.toLowerCase() === \"a\") {\n      e.preventDefault();\n      isCtrlA.current = true;\n      inputRef.current?.select();\n      return;\n    }\n\n    if (e.key === \"Backspace\") {\n      if (isCtrlA.current) {\n        e.preventDefault();\n        setValue(Array(length).fill(\"\"));\n        setActiveIndex(0);\n        isCtrlA.current = false;\n        return;\n      }\n\n      setValueAt(index, \"\");\n      if (index > 0) setActiveIndex(index - 1);\n    } else if (e.key === \"ArrowLeft\" && index > 0) {\n      setActiveIndex(index - 1);\n    } else if (e.key === \"ArrowRight\" && index < length - 1) {\n      setActiveIndex(index + 1);\n    } else {\n      isCtrlA.current = false;\n    }\n  };\n\n  const handleChange = (e) => {\n    const val = e.target.value.replace(/[^0-9a-zA-Z]/g, \"\");\n    if (val) {\n      setValueAt(index, val[0]);\n      if (index < length - 1) setActiveIndex(index + 1);\n    }\n  };\n\n  const handlePaste = (e) => {\n    e.preventDefault();\n    const paste = e.clipboardData.getData(\"text\").replace(/[^0-9a-zA-Z]/g, \"\");\n    if (!paste) return;\n\n    const chars = paste.slice(0, length - index).split(\"\");\n    const newValue = [...value];\n\n    for (let i = 0; i < chars.length && index + i < length; i++) {\n      newValue[index + i] = chars[i];\n    }\n\n    setValue(newValue);\n    const nextIndex = Math.min(index + chars.length, length - 1);\n    setActiveIndex(nextIndex);\n  };\n\n  React.useEffect(() => {\n    if (isActive && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isActive]);\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        \"data-[active=true]:border-ring data-[active=true]:ring-ring/50 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-[var(--radius)] first:border-l last:rounded-r-[var(--radius)] data-[active=true]:z-10 data-[active=true]:ring-[3px]\",\n        className\n      )}\n      {...props}\n    >\n      <input\n        ref={inputRef}\n        type=\"text\"\n        inputMode=\"numeric\"\n        maxLength={1}\n        value={char}\n        onClick={() => setActiveIndex(index)}\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        onPaste={handlePaste}\n        className=\"w-full h-full text-center bg-transparent outline-none\"\n      />\n    </div>\n  );\n}\n\nfunction InputOTPSeparator({ ...props }) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  );\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}