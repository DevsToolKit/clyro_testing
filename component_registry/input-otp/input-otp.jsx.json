{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "input-otp",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/input-otp.jsx",
      "content": "\"use client\";\n/* -------------------- Imports -------------------- */\n// Core React + utilities\nimport * as React from \"react\";\nimport { MinusIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n/* -------------------- Context -------------------- */\n// Provides OTP state & actions to child components\nconst InputOTPContext = React.createContext(null);\n/* -------------------- Main Component -------------------- */\n// Root OTP input container\nfunction InputOTP({ length = 6, onChange, containerClassName, ...props }) {\n    const [value, setValue] = React.useState(Array(length).fill(\"\"));\n    const [activeIndex, setActiveIndex] = React.useState(0);\n    React.useEffect(() => {\n        onChange?.(value.join(\"\"));\n    }, [onChange, value]);\n    const setValueAt = (index, char) => {\n        const next = [...value];\n        next[index] = char;\n        setValue(next);\n    };\n    return (React.createElement(InputOTPContext.Provider, { value: {\n            value,\n            activeIndex,\n            setValueAt,\n            setValue,\n            setActiveIndex,\n            length,\n        } },\n        React.createElement(\"div\", { \"data-slot\": \"input-otp\", className: cn(\"flex items-center gap-2 has-disabled:opacity-50\", containerClassName), ...props })));\n}\n/* -------------------- Group -------------------- */\n// Wraps multiple OTP slots together\nfunction InputOTPGroup({ className, ...props }) {\n    return (React.createElement(\"div\", { \"data-slot\": \"input-otp-group\", className: cn(\"flex items-center\", className), ...props }));\n}\n/* -------------------- Slot -------------------- */\n// Single OTP character input\nfunction InputOTPSlot({ index, className, ...props }) {\n    const inputRef = React.useRef(null);\n    const context = React.useContext(InputOTPContext);\n    if (!context)\n        throw new Error(\"InputOTPSlot must be inside InputOTP\");\n    const { value, setValue, activeIndex, setValueAt, setActiveIndex, length } = context;\n    const char = value[index] ?? \"\";\n    const isActive = activeIndex === index;\n    const isCtrlA = React.useRef(false);\n    const handleKeyDown = (e) => {\n        if (e.ctrlKey && e.key.toLowerCase() === \"a\") {\n            e.preventDefault();\n            isCtrlA.current = true;\n            inputRef.current?.select();\n            return;\n        }\n        if (e.key === \"Backspace\") {\n            if (isCtrlA.current) {\n                e.preventDefault();\n                setValue(Array(length).fill(\"\"));\n                setActiveIndex(0);\n                isCtrlA.current = false;\n                return;\n            }\n            setValueAt(index, \"\");\n            if (index > 0)\n                setActiveIndex(index - 1);\n        }\n        else if (e.key === \"ArrowLeft\" && index > 0) {\n            setActiveIndex(index - 1);\n        }\n        else if (e.key === \"ArrowRight\" && index < length - 1) {\n            setActiveIndex(index + 1);\n        }\n        else {\n            isCtrlA.current = false;\n        }\n    };\n    const handleChange = (e) => {\n        const val = e.target.value.replace(/[^0-9a-zA-Z]/g, \"\");\n        if (val) {\n            setValueAt(index, val[0]);\n            if (index < length - 1)\n                setActiveIndex(index + 1);\n        }\n    };\n    const handlePaste = (e) => {\n        e.preventDefault();\n        const paste = e.clipboardData.getData(\"text\").replace(/[^0-9a-zA-Z]/g, \"\");\n        if (!paste)\n            return;\n        const chars = paste.slice(0, length - index).split(\"\");\n        const newValue = [...value];\n        for (let i = 0; i < chars.length && index + i < length; i++) {\n            newValue[index + i] = chars[i];\n        }\n        setValue(newValue);\n        const nextIndex = Math.min(index + chars.length, length - 1);\n        setActiveIndex(nextIndex);\n    };\n    React.useEffect(() => {\n        if (isActive && inputRef.current) {\n            inputRef.current.focus();\n        }\n    }, [isActive]);\n    return (React.createElement(\"div\", { \"data-slot\": \"input-otp-slot\", \"data-active\": isActive, className: cn(\"data-[active=true]:border-ring data-[active=true]:ring-ring/50 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-[var(--radius)] first:border-l last:rounded-r-[var(--radius)] data-[active=true]:z-10 data-[active=true]:ring-[3px]\", className), ...props },\n        React.createElement(\"input\", { ref: inputRef, type: \"text\", inputMode: \"numeric\", maxLength: 1, value: char, onClick: () => setActiveIndex(index), onKeyDown: handleKeyDown, onChange: handleChange, onPaste: handlePaste, className: \"w-full h-full text-center bg-transparent outline-none\" })));\n}\n/* -------------------- Separator -------------------- */\n// Visual separator between OTP groups\nfunction InputOTPSeparator({ ...props }) {\n    return (React.createElement(\"div\", { \"data-slot\": \"input-otp-separator\", role: \"separator\", ...props },\n        React.createElement(MinusIcon, null)));\n}\n/* -------------------- Exports -------------------- */\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}