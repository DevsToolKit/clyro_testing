{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "select",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/select.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ChevronDownIcon, ChevronUpIcon, CheckIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\n/* -------------------- Context -------------------- */\n// Stores open state, selected value, and element refs for the Select\ntype SelectContextType = {\n  isOpen: boolean;\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n  triggerRef: React.RefObject<HTMLButtonElement | null>;\n  contentRef: React.RefObject<HTMLUListElement | null>;\n};\n\nconst SelectContext = React.createContext<SelectContextType | null>(null);\n\nfunction useSelectContext() {\n  const ctx = React.useContext(SelectContext);\n  if (!ctx) throw new Error(\"Select components must be used inside <Select>\");\n  return ctx;\n}\n\n/* -------------------- Root -------------------- */\n// Main wrapper providing context and outside-click handling\nfunction Select({\n  children,\n  value,\n  onValueChange,\n}: {\n  children: React.ReactNode;\n  value: string;\n  onValueChange: (value: string) => void;\n}) {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<HTMLUListElement>(null);\n\n  const contextValue = React.useMemo(\n    () => ({\n      isOpen,\n      setIsOpen,\n      selectedValue: value,\n      setSelectedValue: (v: string) => {\n        onValueChange(v);\n        setIsOpen(false);\n      },\n      triggerRef,\n      contentRef,\n    }),\n    [isOpen, value, onValueChange]\n  );\n\n  React.useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      if (\n        !triggerRef.current?.contains(e.target as Node) &&\n        !contentRef.current?.contains(e.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <SelectContext.Provider value={contextValue}>\n      <div className=\"relative w-full\">{children}</div>\n    </SelectContext.Provider>\n  );\n}\n\n/* -------------------- Trigger -------------------- */\n// Button that toggles the Select menu\ninterface SelectTriggerProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  size?: \"sm\" | \"default\";\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: SelectTriggerProps) {\n  const { isOpen, setIsOpen, triggerRef } = useSelectContext();\n\n  return (\n    <button\n      ref={triggerRef}\n      onClick={() => setIsOpen(!isOpen)}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground flex w-full items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:ring-ring/50 focus-visible:border-ring aria-invalid:ring-destructive/20 aria-invalid:border-destructive disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8\",\n        size === \"default\" ? \"h-9\" : \"h-8\",\n        className\n      )}\n      aria-haspopup=\"listbox\"\n      aria-expanded={isOpen}\n      data-slot=\"select-trigger\"\n      data-size={size}\n      {...props}\n    >\n      {children}\n      <ChevronDownIcon className=\"size-4 opacity-50 pointer-events-none\" />\n    </button>\n  );\n}\n\n/* -------------------- Value -------------------- */\n// Displays selected value or placeholder\nfunction SelectValue({ placeholder }: { placeholder?: string }) {\n  const { selectedValue } = useSelectContext();\n  return (\n    <span\n      data-slot=\"select-value\"\n      className=\"line-clamp-1 flex items-center gap-2\"\n    >\n      {selectedValue ? (\n        selectedValue\n      ) : (\n        <span className=\"text-muted-foreground\">{placeholder}</span>\n      )}\n    </span>\n  );\n}\n\n/* -------------------- Content -------------------- */\n// Dropdown menu list with keyboard navigation\ntype SelectContentProps = React.HTMLAttributes<HTMLUListElement>;\n\nfunction SelectContent({ className, children, ...props }: SelectContentProps) {\n  const { isOpen, contentRef, triggerRef } = useSelectContext();\n  const [highlightedIndex, setHighlightedIndex] = React.useState(0);\n\n  React.useEffect(() => {\n    const listEl = contentRef.current;\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const items = Array.from(listEl?.querySelectorAll(\"[role=option]\") || []);\n      if (!items.length) return;\n\n      if (e.key === \"ArrowDown\") {\n        e.preventDefault();\n        setHighlightedIndex((i) => (i + 1) % items.length);\n      } else if (e.key === \"ArrowUp\") {\n        e.preventDefault();\n        setHighlightedIndex((i) => (i - 1 < 0 ? items.length - 1 : i - 1));\n      } else if (e.key === \"Enter\") {\n        e.preventDefault();\n        const item = items[highlightedIndex] as HTMLElement;\n        item?.click();\n      } else if (e.key === \"Escape\") {\n        triggerRef.current?.focus();\n      }\n    };\n\n    if (isOpen) {\n      window.addEventListener(\"keydown\", handleKeyDown);\n    } else {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    }\n\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [isOpen, highlightedIndex, contentRef, triggerRef]);\n\n  if (!isOpen) return null;\n\n  return (\n    <ul\n      ref={contentRef}\n      role=\"listbox\"\n      className={cn(\n        \"absolute z-50 mt-1 max-h-60 w-full min-w-[8rem] origin-top overflow-auto rounded-md border bg-popover text-popover-foreground shadow-md focus:outline-none p-[8px]\",\n        className\n      )}\n      data-slot=\"select-content\"\n      {...props}\n    >\n      {React.Children.map(children, (child, index) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child, {\n              highlighted: index === highlightedIndex,\n            } as Partial<SelectItemProps>)\n          : child\n      )}\n    </ul>\n  );\n}\n\n/* -------------------- Item -------------------- */\n// Single option in the dropdown\ninterface SelectItemProps extends React.LiHTMLAttributes<HTMLLIElement> {\n  value: string;\n  highlighted?: boolean;\n}\n\nfunction SelectItem({\n  children,\n  value,\n  className,\n  highlighted,\n  ...props\n}: SelectItemProps) {\n  const { selectedValue, setSelectedValue } = useSelectContext();\n  const isSelected = selectedValue === value;\n\n  return (\n    <li\n      role=\"option\"\n      aria-selected={isSelected}\n      onClick={() => setSelectedValue(value)}\n      className={cn(\n        \"relative flex w-full cursor-default select-none items-center gap-2 rounded-[var(--radius)] p-[8px] text-sm outline-none hover:bg-accent/50 focus:bg-accent/50 data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground my-1.5\",\n        isSelected && \"bg-accent text-accent-foreground\",\n        highlighted && \"bg-muted\",\n        className\n      )}\n      data-slot=\"select-item\"\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        {isSelected && <CheckIcon className=\"size-4\" />}\n      </span>\n      {children}\n    </li>\n  );\n}\n\n/* -------------------- Label -------------------- */\n// Optional label for grouping options\nfunction SelectLabel({\n  className,\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      data-slot=\"select-label\"\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\n/* -------------------- Separator -------------------- */\n// Divider between groups of options\nfunction SelectSeparator({ className }: { className?: string }) {\n  return (\n    <div\n      role=\"separator\"\n      className={cn(\"bg-border pointer-events-none my-1 h-px\", className)}\n      data-slot=\"select-separator\"\n    />\n  );\n}\n\n/* -------------------- Scroll Buttons -------------------- */\n// Optional scroll controls (mocked)\nfunction SelectScrollUpButton() {\n  return (\n    <div className=\"flex items-center justify-center py-1\">\n      <ChevronUpIcon className=\"size-4\" />\n    </div>\n  );\n}\n\nfunction SelectScrollDownButton() {\n  return (\n    <div className=\"flex items-center justify-center py-1\">\n      <ChevronDownIcon className=\"size-4\" />\n    </div>\n  );\n}\n\n/* -------------------- Exports -------------------- */\nexport {\n  Select,\n  SelectTrigger,\n  SelectContent,\n  SelectItem,\n  SelectLabel,\n  SelectValue,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}