{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "select",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/select.jsx",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport { ChevronDownIcon, ChevronUpIcon, CheckIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst SelectContext = React.createContext(null);\nfunction useSelectContext() {\n    const ctx = React.useContext(SelectContext);\n    if (!ctx)\n        throw new Error(\"Select components must be used inside <Select>\");\n    return ctx;\n}\n/* -------------------- Root -------------------- */\n// Main wrapper providing context and outside-click handling\nfunction Select({ children, value, onValueChange, }) {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const triggerRef = React.useRef(null);\n    const contentRef = React.useRef(null);\n    const contextValue = React.useMemo(() => ({\n        isOpen,\n        setIsOpen,\n        selectedValue: value,\n        setSelectedValue: (v) => {\n            onValueChange(v);\n            setIsOpen(false);\n        },\n        triggerRef,\n        contentRef,\n    }), [isOpen, value, onValueChange]);\n    React.useEffect(() => {\n        const handleClickOutside = (e) => {\n            if (!triggerRef.current?.contains(e.target) &&\n                !contentRef.current?.contains(e.target)) {\n                setIsOpen(false);\n            }\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, []);\n    return (React.createElement(SelectContext.Provider, { value: contextValue },\n        React.createElement(\"div\", { className: \"relative w-full\" }, children)));\n}\nfunction SelectTrigger({ className, size = \"default\", children, ...props }) {\n    const { isOpen, setIsOpen, triggerRef } = useSelectContext();\n    return (React.createElement(\"button\", { ref: triggerRef, onClick: () => setIsOpen(!isOpen), className: cn(\"border-input data-[placeholder]:text-muted-foreground flex w-full items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:ring-ring/50 focus-visible:border-ring aria-invalid:ring-destructive/20 aria-invalid:border-destructive disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8\", size === \"default\" ? \"h-9\" : \"h-8\", className), \"aria-haspopup\": \"listbox\", \"aria-expanded\": isOpen, \"data-slot\": \"select-trigger\", \"data-size\": size, ...props },\n        children,\n        React.createElement(ChevronDownIcon, { className: \"size-4 opacity-50 pointer-events-none\" })));\n}\n/* -------------------- Value -------------------- */\n// Displays selected value or placeholder\nfunction SelectValue({ placeholder }) {\n    const { selectedValue } = useSelectContext();\n    return (React.createElement(\"span\", { \"data-slot\": \"select-value\", className: \"line-clamp-1 flex items-center gap-2\" }, selectedValue ? (selectedValue) : (React.createElement(\"span\", { className: \"text-muted-foreground\" }, placeholder))));\n}\nfunction SelectContent({ className, children, ...props }) {\n    const { isOpen, contentRef, triggerRef } = useSelectContext();\n    const [highlightedIndex, setHighlightedIndex] = React.useState(0);\n    React.useEffect(() => {\n        const listEl = contentRef.current;\n        const handleKeyDown = (e) => {\n            const items = Array.from(listEl?.querySelectorAll(\"[role=option]\") || []);\n            if (!items.length)\n                return;\n            if (e.key === \"ArrowDown\") {\n                e.preventDefault();\n                setHighlightedIndex((i) => (i + 1) % items.length);\n            }\n            else if (e.key === \"ArrowUp\") {\n                e.preventDefault();\n                setHighlightedIndex((i) => (i - 1 < 0 ? items.length - 1 : i - 1));\n            }\n            else if (e.key === \"Enter\") {\n                e.preventDefault();\n                const item = items[highlightedIndex];\n                item?.click();\n            }\n            else if (e.key === \"Escape\") {\n                triggerRef.current?.focus();\n            }\n        };\n        if (isOpen) {\n            window.addEventListener(\"keydown\", handleKeyDown);\n        }\n        else {\n            window.removeEventListener(\"keydown\", handleKeyDown);\n        }\n        return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [isOpen, highlightedIndex, contentRef, triggerRef]);\n    if (!isOpen)\n        return null;\n    return (React.createElement(\"ul\", { ref: contentRef, role: \"listbox\", className: cn(\"absolute z-50 mt-1 max-h-60 w-full min-w-[8rem] origin-top overflow-auto rounded-md border bg-popover text-popover-foreground shadow-md focus:outline-none p-[8px]\", className), \"data-slot\": \"select-content\", ...props }, React.Children.map(children, (child, index) => React.isValidElement(child)\n        ? React.cloneElement(child, {\n            highlighted: index === highlightedIndex,\n        })\n        : child)));\n}\nfunction SelectItem({ children, value, className, highlighted, ...props }) {\n    const { selectedValue, setSelectedValue } = useSelectContext();\n    const isSelected = selectedValue === value;\n    return (React.createElement(\"li\", { role: \"option\", \"aria-selected\": isSelected, onClick: () => setSelectedValue(value), className: cn(\"relative flex w-full cursor-default select-none items-center gap-2 rounded-[var(--radius)] p-[8px] text-sm outline-none hover:bg-accent/50 focus:bg-accent/50 data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground my-1.5\", isSelected && \"bg-accent text-accent-foreground\", highlighted && \"bg-muted\", className), \"data-slot\": \"select-item\", ...props },\n        React.createElement(\"span\", { className: \"absolute right-2 flex size-3.5 items-center justify-center\" }, isSelected && React.createElement(CheckIcon, { className: \"size-4\" })),\n        children));\n}\n/* -------------------- Label -------------------- */\n// Optional label for grouping options\nfunction SelectLabel({ className, children, ...props }) {\n    return (React.createElement(\"div\", { className: cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className), \"data-slot\": \"select-label\", ...props }, children));\n}\n/* -------------------- Separator -------------------- */\n// Divider between groups of options\nfunction SelectSeparator({ className }) {\n    return (React.createElement(\"div\", { role: \"separator\", className: cn(\"bg-border pointer-events-none my-1 h-px\", className), \"data-slot\": \"select-separator\" }));\n}\n/* -------------------- Scroll Buttons -------------------- */\n// Optional scroll controls (mocked)\nfunction SelectScrollUpButton() {\n    return (React.createElement(\"div\", { className: \"flex items-center justify-center py-1\" },\n        React.createElement(ChevronUpIcon, { className: \"size-4\" })));\n}\nfunction SelectScrollDownButton() {\n    return (React.createElement(\"div\", { className: \"flex items-center justify-center py-1\" },\n        React.createElement(ChevronDownIcon, { className: \"size-4\" })));\n}\n/* -------------------- Exports -------------------- */\nexport { Select, SelectTrigger, SelectContent, SelectItem, SelectLabel, SelectValue, SelectSeparator, SelectScrollUpButton, SelectScrollDownButton, };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}