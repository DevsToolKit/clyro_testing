{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radio",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/radio.jsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nfunction RadioGroup({\n  className,\n  children,\n  value: controlledValue,\n  defaultValue,\n  onChange,\n  name,\n  disableHoverEffect = false,\n  ...props\n}) {\n  const [uncontrolledValue, setUncontrolledValue] =\n    React.useState(defaultValue);\n  const isControlled = controlledValue !== undefined;\n  const value = isControlled ? controlledValue : uncontrolledValue;\n\n  const cloneChildren = (children) => {\n    return React.Children.map(children, (child) => {\n      if (!React.isValidElement(child)) return child;\n\n      // Narrow down to valid ReactElement\n      const element = child;\n\n      if (element.type === RadioGroupItem) {\n        const childDisableHover =\n          element.props.disableHoverEffect ?? disableHoverEffect;\n\n        return React.cloneElement(element, {\n          name,\n          checked: value === element.props.value,\n          onChange: () => {\n            const val = element.props.value;\n            if (typeof val === \"string\") {\n              if (!isControlled) setUncontrolledValue(val);\n              onChange?.(val);\n            }\n          },\n          disableHoverEffect: childDisableHover,\n        });\n      }\n\n      if (element.props?.children) {\n        return React.cloneElement(element, {\n          ...element.props,\n          children: cloneChildren(element.props.children),\n        });\n      }\n\n      return element;\n    });\n  };\n\n  return (\n    <div className={cn(\"grid gap-3\", className)} {...props}>\n      {cloneChildren(children)}\n    </div>\n  );\n}\n\nconst RadioGroupItem = React.forwardRef(\n  (\n    {\n      className,\n      value,\n      name,\n      checked,\n      onChange,\n      disabled,\n      disableHoverEffect = false,\n      id,\n      ...props\n    },\n    ref\n  ) => {\n    const inputRef = React.useRef(null);\n\n    React.useImperativeHandle(ref, () => inputRef.current);\n\n    const handleClick = () => {\n      if (!disabled) {\n        inputRef.current?.click();\n      }\n    };\n\n    const handleKeyDown = (e) => {\n      if ((e.key === \" \" || e.key === \"Enter\") && !disabled) {\n        e.preventDefault();\n        inputRef.current?.click();\n      }\n    };\n\n    return (\n      <div className=\"relative flex items-center gap-2\">\n        <input\n          type=\"radio\"\n          id={id}\n          name={name}\n          value={value}\n          checked={checked}\n          onChange={onChange}\n          disabled={disabled}\n          ref={inputRef}\n          className=\"peer sr-only\"\n          aria-checked={checked}\n          {...props}\n        />\n        <div\n          role=\"radio\"\n          aria-checked={checked}\n          tabIndex={disabled ? -1 : 0}\n          onClick={handleClick}\n          onKeyDown={handleKeyDown}\n          className={cn(\n            \"relative flex items-center justify-center size-4 rounded-full border border-[var(--foreground)] transition-all shadow-xs\",\n            \"peer-checked:border-[var(--primary)] peer-checked:bg-[var(--primary)/10]\",\n            disableHoverEffect\n              ? \"\"\n              : \"hover:ring-10 hover:ring-[var(--primary)/5]\",\n            \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring/50\",\n            \"disabled:cursor-not-allowed disabled:opacity-50\",\n            className\n          )}\n        >\n          {checked && (\n            <div\n              className=\"absolute rounded-full\"\n              style={{\n                width: 10,\n                height: 10,\n                backgroundColor: \"var(--primary)\",\n              }}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nRadioGroupItem.displayName = \"RadioGroupItem\";\n\nexport { RadioGroup, RadioGroupItem };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}