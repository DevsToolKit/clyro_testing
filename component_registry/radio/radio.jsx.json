{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "radio",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/radio.jsx",
      "content": "\"use client\";\n/* -------------------- Imports -------------------- */\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n/* -------------------- RadioGroup Component -------------------- */\n// Groups multiple RadioGroupItem components and manages controlled/uncontrolled state\nfunction RadioGroup({ className, children, value: controlledValue, defaultValue, onChange, name, disableHoverEffect = false, ...props }) {\n    const [uncontrolledValue, setUncontrolledValue] = React.useState(defaultValue);\n    const isControlled = controlledValue !== undefined;\n    const value = isControlled ? controlledValue : uncontrolledValue;\n    const cloneChildren = (children) => React.Children.map(children, (child) => {\n        if (!React.isValidElement(child))\n            return child;\n        const element = child;\n        if (element.type === RadioGroupItem) {\n            const childDisableHover = element.props.disableHoverEffect ?? disableHoverEffect;\n            return React.cloneElement(element, {\n                name,\n                checked: value === element.props.value,\n                onChange: () => {\n                    const val = element.props.value;\n                    if (typeof val === \"string\") {\n                        if (!isControlled)\n                            setUncontrolledValue(val);\n                        onChange?.(val);\n                    }\n                },\n                disableHoverEffect: childDisableHover,\n            });\n        }\n        if (element.props?.children) {\n            return React.cloneElement(element, {\n                ...element.props,\n                children: cloneChildren(element.props.children),\n            });\n        }\n        return element;\n    });\n    return (React.createElement(\"div\", { className: cn(\"grid gap-3\", className), ...props }, cloneChildren(children)));\n}\n/* -------------------- RadioGroupItem Component -------------------- */\n// Single radio input with custom styling and hover/focus effects\nconst RadioGroupItem = React.forwardRef(({ className, value, name, checked, onChange, disabled, disableHoverEffect = false, id, ...props }, ref) => {\n    const inputRef = React.useRef(null);\n    React.useImperativeHandle(ref, () => inputRef.current);\n    const handleClick = () => {\n        if (!disabled) {\n            inputRef.current?.click();\n        }\n    };\n    const handleKeyDown = (e) => {\n        if ((e.key === \" \" || e.key === \"Enter\") && !disabled) {\n            e.preventDefault();\n            inputRef.current?.click();\n        }\n    };\n    return (React.createElement(\"div\", { className: \"relative flex items-center gap-2\" },\n        React.createElement(\"input\", { type: \"radio\", id: id, name: name, value: value, checked: checked, onChange: onChange, disabled: disabled, ref: inputRef, className: \"peer sr-only\", \"aria-checked\": checked, ...props }),\n        React.createElement(\"div\", { role: \"radio\", \"aria-checked\": checked, tabIndex: disabled ? -1 : 0, onClick: handleClick, onKeyDown: handleKeyDown, className: cn(\"relative flex items-center justify-center size-4 rounded-full border border-[var(--foreground)] transition-all shadow-xs\", \"peer-checked:border-[var(--primary)] peer-checked:bg-[var(--primary)/10]\", disableHoverEffect\n                ? \"\"\n                : \"hover:ring-10 hover:ring-[var(--primary)/5]\", \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring/50\", \"disabled:cursor-not-allowed disabled:opacity-50\", className) }, checked && (React.createElement(\"div\", { className: \"absolute rounded-full\", style: {\n                width: 10,\n                height: 10,\n                backgroundColor: \"var(--primary)\",\n            } })))));\n});\nRadioGroupItem.displayName = \"RadioGroupItem\";\n/* -------------------- Exports -------------------- */\nexport { RadioGroup, RadioGroupItem };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}