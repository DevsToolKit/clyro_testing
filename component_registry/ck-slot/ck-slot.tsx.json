{
  "$schema": "https://clyro.devstoolkit.space/schema/registry-item.json",
  "name": "ck-slot",
  "type": "registry:ui",
  "author": "clyro (https://clyro.devstoolkit.space)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/ck-slot.tsx",
      "content": "import * as React from \"react\";\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children: React.ReactElement<React.HTMLProps<HTMLElement>>;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>(\n  ({ children, className, ...props }, ref) => {\n    return React.cloneElement(children, {\n      ...props,\n      ref: (node: HTMLElement | null) => {\n        if (typeof ref === \"function\") {\n          ref(node);\n        } else if (ref) {\n          (ref as React.MutableRefObject<HTMLElement | null>).current = node;\n        }\n\n        const childRef = (\n          children as unknown as {\n            ref:\n              | React.RefObject<HTMLElement>\n              | ((instance: HTMLElement | null) => void)\n              | null;\n          }\n        ).ref;\n        if (typeof childRef === \"function\") {\n          childRef(node);\n        } else if (childRef && typeof childRef === \"object\" && node) {\n          childRef.current = node;\n        }\n      },\n      className: [children.props.className, className]\n        .filter(Boolean)\n        .join(\" \"),\n    });\n  }\n);\n\nSlot.displayName = \"Slot\";\nexport { Slot };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}